@using Robot.ED.FacebookConnector.Service.RPA.UI.Services
@implements IDisposable
@inject IRpaApiService ApiService
@inject RpaStateService StateService
@inject ILogger<Dashboard> Logger

<div class="dashboard">
    <div class="header">
        <h1>Facebook Connector RPA</h1>
        <div class="status-badge @GetStatusClass()">
            @GetStatusText()
        </div>
    </div>

    <div class="controls">
        @if (StateService.State == RpaProcessState.Stopped)
        {
            <button type="button" class="btn btn-start" @onclick="StartRpa">
                <span class="icon">▶</span>
                Start @if (_startClickCount > 0) { <text>(@_startClickCount)</text> }
            </button>
        }
        else if (StateService.State == RpaProcessState.Running)
        {
            <button type="button" class="btn btn-pause" @onclick="PauseRpa">
                <span class="icon">⏸</span>
                Pause
            </button>
        }
        else if (StateService.State == RpaProcessState.Paused)
        {
            <button type="button" class="btn btn-resume" @onclick="ResumeRpa">
                <span class="icon">▶</span>
                Resume
            </button>
            <button type="button" class="btn btn-stop" @onclick="StopRpa">
                <span class="icon">⏹</span>
                Stop
            </button>
        }
    </div>

    <div class="info-section">
        <div class="info-card">
            <div class="info-label">Current Cycle Time</div>
            <div class="info-value">@GetElapsedTime()</div>
        </div>

        <div class="info-card">
            <div class="info-label">Last Execution</div>
            <div class="status-indicator @GetLastExecutionClass()">
                @GetLastExecutionText()
            </div>
            @if (!string.IsNullOrEmpty(StateService.LastExecutionMessage))
            {
                <div class="status-message">@StateService.LastExecutionMessage</div>
            }
        </div>

        <div class="info-card">
            <div class="info-label">API Server</div>
            <div class="info-value">
                @if (ApiService.IsRunning)
                {
                    <span class="api-status running">● Running (Port 8080/8081)</span>
                }
                else
                {
                    <span class="api-status stopped">● Stopped</span>
                }
            </div>
        </div>
    </div>

    <div class="footer">
        <button type="button" class="btn btn-exit" @onclick="RequestExit">
            <span class="icon">✕</span>
            Exit Application
        </button>
    </div>
</div>

@code {
    private System.Threading.Timer? _timer;
    private int _startClickCount = 0;

    protected override void OnInitialized()
    {
        StateService.StateChanged += OnStateChanged;
        _timer = new System.Threading.Timer(_ => InvokeAsync(StateHasChanged), null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private void OnStateChanged(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task StartRpa()
    {
        _startClickCount++;
        Logger.LogInformation($"StartRpa called (click count: {_startClickCount})");
        
        try
        {
            Logger.LogInformation("Starting RPA service...");
            StateService.LastExecutionMessage = $"Starting... (attempt #{_startClickCount})";
            await InvokeAsync(StateHasChanged);
            
            await ApiService.StartAsync();
            StateService.State = RpaProcessState.Stopped; // API ready, awaiting process requests
            StateService.LastExecutionMessage = "API Service started successfully";
            StateService.LastExecutionSuccess = true;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error starting RPA service");
            StateService.LastExecutionMessage = $"Error: {ex.Message}";
            StateService.LastExecutionSuccess = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task StopRpa()
    {
        try
        {
            Logger.LogInformation("Stopping RPA service...");
            await ApiService.StopAsync();
            StateService.State = RpaProcessState.Stopped;
            StateService.CurrentCycleStartTime = null;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error stopping RPA service");
            StateService.LastExecutionMessage = $"Stop Error: {ex.Message}";
            StateService.LastExecutionSuccess = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void PauseRpa()
    {
        Logger.LogInformation("Pausing RPA service...");
        StateService.State = RpaProcessState.Paused;
    }

    private void ResumeRpa()
    {
        Logger.LogInformation("Resuming RPA service...");
        StateService.State = RpaProcessState.Stopped; // Resume accepting process requests
    }

    private async Task RequestExit()
    {
        // This will be handled by the WinForms layer
        await Task.CompletedTask;
    }

    private string GetStatusText()
    {
        return StateService.State switch
        {
            RpaProcessState.Running => "Running",
            RpaProcessState.Paused => "Paused",
            _ => "Stopped"
        };
    }

    private string GetStatusClass()
    {
        return StateService.State switch
        {
            RpaProcessState.Running => "status-running",
            RpaProcessState.Paused => "status-paused",
            _ => "status-stopped"
        };
    }

    private string GetElapsedTime()
    {
        var elapsed = StateService.GetCurrentCycleElapsedTime();
        if (elapsed.HasValue)
        {
            return $"{elapsed.Value:mm\\:ss}";
        }
        return "--:--";
    }

    private string GetLastExecutionClass()
    {
        return StateService.LastExecutionSuccess ? "execution-success" : "execution-failure";
    }

    private string GetLastExecutionText()
    {
        return StateService.LastExecutionSuccess ? "Success" : "Failure";
    }

    public void Dispose()
    {
        _timer?.Dispose();
        StateService.StateChanged -= OnStateChanged;
    }
}
