// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Robot.ED.FacebookConnector.Common.Configuration;

#nullable disable

namespace Robot.ED.FacebookConnector.Service.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251024012314_AddTokenToRobot")]
    partial class AddTokenToRobot
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Robot.ED.FacebookConnector.Common.Models.Queue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AiConfig")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("AllocatedRobotId")
                        .HasColumnType("integer");

                    b.Property<string>("BridgeKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<bool>("HasError")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OriginType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phrase")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<string>("TrackId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UniqueId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AllocatedRobotId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsProcessed");

                    b.HasIndex("TrackId");

                    b.HasIndex("UniqueId")
                        .IsUnique();

                    b.ToTable("queue", (string)null);
                });

            modelBuilder.Entity("Robot.ED.FacebookConnector.Common.Models.QueueData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QueueId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QueueId");

                    b.ToTable("queue_data", (string)null);
                });

            modelBuilder.Entity("Robot.ED.FacebookConnector.Common.Models.QueueResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<bool>("HasError")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProcessedByRobotId")
                        .HasColumnType("integer");

                    b.Property<int>("QueueId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tag")
                        .HasColumnType("text");

                    b.Property<string>("TrackId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedByRobotId");

                    b.HasIndex("QueueId");

                    b.HasIndex("ReceivedAt");

                    b.HasIndex("TrackId");

                    b.ToTable("queue_result", (string)null);
                });

            modelBuilder.Entity("Robot.ED.FacebookConnector.Common.Models.QueueResultAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QueueResultId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QueueResultId");

                    b.ToTable("queue_result_attachment", (string)null);
                });

            modelBuilder.Entity("Robot.ED.FacebookConnector.Common.Models.QueueResultMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QueueResultId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QueueResultId");

                    b.ToTable("queue_result_message", (string)null);
                });

            modelBuilder.Entity("Robot.ED.FacebookConnector.Common.Models.QueueTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("QueueId")
                        .HasColumnType("integer");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QueueId");

                    b.ToTable("queue_tag", (string)null);
                });

            modelBuilder.Entity("Robot.ED.FacebookConnector.Common.Models.Robot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Available")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastAllocatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Available");

                    b.ToTable("robot", (string)null);
                });

            modelBuilder.Entity("Robot.ED.FacebookConnector.Common.Models.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TokenValue")
                        .IsUnique();

                    b.ToTable("token", (string)null);
                });

            modelBuilder.Entity("Robot.ED.FacebookConnector.Common.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TokenValue")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Robot.ED.FacebookConnector.Common.Models.Queue", b =>
                {
                    b.HasOne("Robot.ED.FacebookConnector.Common.Models.Robot", "AllocatedRobot")
                        .WithMany()
                        .HasForeignKey("AllocatedRobotId");

                    b.Navigation("AllocatedRobot");
                });

            modelBuilder.Entity("Robot.ED.FacebookConnector.Common.Models.QueueData", b =>
                {
                    b.HasOne("Robot.ED.FacebookConnector.Common.Models.Queue", "Queue")
                        .WithMany("QueueData")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Queue");
                });

            modelBuilder.Entity("Robot.ED.FacebookConnector.Common.Models.QueueResult", b =>
                {
                    b.HasOne("Robot.ED.FacebookConnector.Common.Models.Robot", "ProcessedByRobot")
                        .WithMany()
                        .HasForeignKey("ProcessedByRobotId");

                    b.HasOne("Robot.ED.FacebookConnector.Common.Models.Queue", "Queue")
                        .WithMany()
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessedByRobot");

                    b.Navigation("Queue");
                });

            modelBuilder.Entity("Robot.ED.FacebookConnector.Common.Models.QueueResultAttachment", b =>
                {
                    b.HasOne("Robot.ED.FacebookConnector.Common.Models.QueueResult", "QueueResult")
                        .WithMany("Attachments")
                        .HasForeignKey("QueueResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QueueResult");
                });

            modelBuilder.Entity("Robot.ED.FacebookConnector.Common.Models.QueueResultMessage", b =>
                {
                    b.HasOne("Robot.ED.FacebookConnector.Common.Models.QueueResult", "QueueResult")
                        .WithMany("Messages")
                        .HasForeignKey("QueueResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QueueResult");
                });

            modelBuilder.Entity("Robot.ED.FacebookConnector.Common.Models.QueueTag", b =>
                {
                    b.HasOne("Robot.ED.FacebookConnector.Common.Models.Queue", "Queue")
                        .WithMany("QueueTags")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Queue");
                });

            modelBuilder.Entity("Robot.ED.FacebookConnector.Common.Models.Queue", b =>
                {
                    b.Navigation("QueueData");

                    b.Navigation("QueueTags");
                });

            modelBuilder.Entity("Robot.ED.FacebookConnector.Common.Models.QueueResult", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
